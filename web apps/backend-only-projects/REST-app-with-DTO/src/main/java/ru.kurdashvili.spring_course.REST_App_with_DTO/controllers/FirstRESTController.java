package ru.kurdashvili.spring_course.REST_App_with_DTO.controllers;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;


// Во всех предыдущих разделах Spring мы создавали контроллеры и в методах
// контроллеров мы возвращали название представления (название того шаблона,
// который лежал обычно в папке templates, который нужно показать в браузере)
// Здесь же (в REST приложении) мы реализуем тоже контроллеры, но в методах
// этих контроллеров мы будем возвращать данные (это и есть REST приложение)

@Controller
@RequestMapping("/api")
// Если хотим, чтобы в этом конторллере каждый метод был с аннотацией
// @ResponseBody (те чтобы каждый метод возвращал данные), то можем поментить
// этот класс аннотацией @RestController, те:
// @RestController = @Controller + @ResponseBody над каждым методом
public class FirstRESTController {

    @GetMapping("/sayHello")
    @ResponseBody // эта аннотация явл главной аннотацией для создания
    // REST приложений, потому что если мы помечаем метод этой аннотацией,
    // то Spring понимает что в этом методе мы больше не возвращаем название
    // для представления, в этом методе мы возвращаем данные -> если вовзращаем
    // String, то она будет возвращена как данные (просто как строка, те клиеент
    // получить объект класса String, который вернем)
    public String sayHello(){ // Если в этом методе будем возвращать объект собственного
        // класса или объект любого другого класса, то этот объект будет конвертироваться
        // Jackson-ом в JSON и будет возврщаться клиенту в виде JSON
        return "Hello World"; // Эта строка тоже будет сконвертирована Jackson-ом и потом
        // будет передана по сети.
        // Если сейчас обратимся по адресу /api/sayHello в браузере, то увидим строку Hello World
        // Обычно с REST приложениями не взаимод через браузер, тк в REST приложениях возвращаме
        // данные, а  браузер обычн оожидает что возврашщается html представление.
        // Но тем не менне можем использовать браузер, чтоб смотреть возвр данные, потому что браузер
        // он умеет показывать не только представления (html страницы), но он также умеет показывать
        // просто данные и может даже показывать JSON -> все равно можем обращаться через бразуер к
        // методам, которые помечены как @ResponseBody
    }
}
